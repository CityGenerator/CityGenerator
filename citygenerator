#!/usr/bin/perl -wT

use strict;
use CGI;
use Data::Dumper;
use JSON;
use List::Util 'shuffle', 'min', 'max' ;
use POSIX;
use Template;
use XML::Simple;
use lib "lib/";
use GenericGenerator;
use FlagGenerator;
use CityGenerator;
use SummaryFormatter;
use EnvironmentFormatter;
use CityscapeFormatter;
use CensusDataFormatter;
use GovtFormatter;
our $q = CGI->new;


my $testcityid=GenericGenerator::set_seed();
if (defined $q->param('seed')){
    $testcityid=$q->param('seed');
}elsif (defined $q->param('cityid')){
    $testcityid=$q->param('cityid');
}elsif (defined $q->param('continent')){
    $testcityid=$q->param('continent').'00';
}elsif (defined $q->param('region')){
    $testcityid=$q->param('region').'0';
}



    my $city=CityGenerator::create_city({seed=>$testcityid});
    CityGenerator::flesh_out_city($city);
    $city->{'flag'}=FlagGenerator::create_flag({seed=>$testcityid, 'cityname'=>$city->{'name'}});
if (defined $q->param('type') and $q->param('type') eq 'xml' ){
    print $q->header( 'text/xml' );
    print "<?xml version='1.0'  encoding='utf-8' ?>\n";
    print XMLout($city);
}elsif (defined $q->param('type') and $q->param('type') eq 'json' ){
    print $q->header( 'application/json' );
    my $JSON  = JSON->new->utf8;
    $JSON->convert_blessed(1);
    print  $JSON->encode($city);

}elsif (defined $q->param('type') and $q->param('type') eq 'dump' ){
    print $q->header( 'text/plain' );
    print Dumper $city;
}else {
    print $q->header( 'text/html; charset=utf-8' );
    print_page($city);
}

exit;

#################################################################################################
#################################################################################################
#################################################################################################

sub print_page {
    my ($city)=@_;

    my $templates = Template->new({
        INCLUDE_PATH => 'Templates/',
        INTERPOLATE  => 1,
    }) || die "$Template::ERROR\n";
    my $JSON  = JSON->new->utf8;

    $JSON->convert_blessed(1);
    my $json=$JSON->encode($city->{'flag'});

    my $vars = {
        'title'         => 'Welcome to '.$city->{'name'}."!",
        'logo'          => "<canvas id='flag' style='' width='180' height='90'  onclick='embiggen(this);'  > </canvas>",
        'seed'          => $city->{'seed'},
        'onload'        => "create_flag( $json,  \"flag\");",

        'content'       => print_content($city),
        'worldnav'      => print_worldnav($city),
    };
    $templates->process('base.tmpl', $vars) || die $templates->error(), "\n";
}

sub print_worldnav {
    my ($city)=@_;

    my $templates = Template->new({
        INCLUDE_PATH => 'Templates/',
        INTERPOLATE  => 1,
    }) || die "$Template::ERROR\n";

    my $formtmpl;
    my $vars = {
        'cityname'      => $city->{'name'},
        'seed'          => $city->{'seed'},
    };
    $templates->process('worldnav.tmpl', $vars, \$formtmpl) || die $templates->error(), "\n";

    return $formtmpl;
}





sub print_content {
    my ($city)=@_;

    my $templates = Template->new({
        INCLUDE_PATH => 'Templates/',
        INTERPOLATE  => 1,
    }) || die "$Template::ERROR\n";

    my $formtmpl;
    my $vars = {
        'cityname'      => $city->{'name'},
        'seed'          => $city->{'seed'},
        'summarytext'   => SummaryFormatter::printSummary($city),
        'geographytext' => EnvironmentFormatter::printGeography($city),
        'astronomytext' => EnvironmentFormatter::printAstronomy($city),
        'climatetext'   => EnvironmentFormatter::printClimate($city),
        'cityscapetext' => CityscapeFormatter::printCityscape($city),
        'censusdatatext'=> CensusDataFormatter::printCensusData($city),
        'govtdatatext'  => GovtFormatter::printGovt($city),
        'govtcrimedatatext'=> GovtFormatter::printCrime($city),
    };
    $templates->process('citygenerator_content.tmpl', $vars, \$formtmpl) || die $templates->error(), "\n";

    return $formtmpl;
}
